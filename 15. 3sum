class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
//         List<List<Integer>> result = new ArrayList<>();
//         if (nums == null || nums.length == 0) {
//             return result;
//         }
//         Arrays.sort(nums);
//         for (int i = 1; i < nums.length - 1; i++) {
//             int left = i - 1;
//             int right = i + 1;
//             while (left >= 0 && right <= nums.length - 1) {
//                 if (nums[left] + nums[right] + nums[i] > 0) {
//                     left--;
//                 } else if (nums[left] + nums[right] + nums[i] < 0) {
//                     right++;
//                 } else {
//                     List<Integer> res = new ArrayList<>();
//                     res.add(nums[left]);
//                     res.add(nums[right]);
//                     res.add(nums[i]);
//                     if (!result.contains(res)) {
//                         result.add(res);
//                     }
//                     left--;
//                     right++;
//                 }
                
//             }
//         }
//         return result;  这个算法至少是o(n^2) 会冗余复杂度
          List<List<Integer>> result = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return result;
        }
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            int target = nums[i];
            int left = i + 1, right = nums.length - 1;
            while (left < right) {
                
                if (nums[left] + nums[right] + target > 0) {
                    right--;
                } else if (nums[left] + nums[right] + target < 0) {
                    left++;
                } else {
                    List<Integer> res = new ArrayList<>();
                    res.add(nums[left]);
                    res.add(nums[right]);
                    res.add(target);
                    if (!result.contains(res)) {
                         result.add(res);
                    }
                    while (left < right && nums[left] == nums[left + 1]) {
                    left++;
                }
                    while (left < right && nums[right] == nums[right - 1]) {
                    right--;
                }
                    left++;
                    right--;
                }
                
            }
        }
        return result; //加了两句while依然复杂度很高，到底哪个地方可以降低复杂度呢？
        
    }
}

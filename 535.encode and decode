public class Codec {
    Map<Integer, String> demap = new HashMap<>();
    Map<String, Integer> enmap = new HashMap<>();
    int i = 0;
    // Encodes a URL to a shortened URL.
    public String encode(String longUrl) {
        String alp = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String hashResult="";
        for (int j = 0; j < 7; j++) {
            hashResult.concat(Character.toString(alp.charAt((int)(i + Math.random() * 100) % 51)));
        }
        demap.put(i, longUrl);
        enmap.put(hashResult, i);
        String result = "http://tinyurl.com/" + hashResult;
        i++;
        return result;
    }

    // Decodes a shortened URL to its original URL.
    public String decode(String shortUrl) {
        String dec = demap.get(enmap.get(shortUrl.replace("http://tinyurl.com/","")));
        return dec;
    }
}
// 这么写虽然可以完成fix-length string， 但是功能不明确，应该把encode中的不必要参数去掉，生成参数的方法独立出来
// 更好的写法如下:
public class Codec {
    Map<String, String> map = new HashMap<>(); // 做一个string : string 的map
    String alp = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    // Encodes a URL to a shortened URL.
    public String encode(String longUrl) {
        String key = genStrKey();
        while(map.containsKey(key)) {
            key = genStrKey();
        }
        map.put(key, longUrl); 
        return "http://tinyurl.com/" + key;
       
    }

    // Decodes a shortened URL to its original URL.
    public String decode(String shortUrl) {
        return map.get(shortUrl.replace("http://tinyurl.com/", ""));
    }
    public String genStrKey() { // 用一个函数生成随机string， 当encode时候如果key发现被占用，也可以再次调用此函数重新生成key
         StringBuilder str = new StringBuilder();
        for (int i = 0; i < 7; i++) {
            str.append(alp.charAt(((int)(Math.random() * 100) + i) % 62));
        }
        return str.toString();
    }
}

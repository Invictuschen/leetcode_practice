1. class Solution {
    public boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if (n ==1) {
            return true;
        }
        // if (n / 2 * 2 != n) {
        //     return false;
        // }
        if (n % 2 != 0) {  // 当数不能被2整除时就弹出 说明不是2的乘方
            return false;
        }
        return isPowerOfTwo(n / 2);
    }
}
2. // 另一种想法，用bit位:
class Solution {
    public boolean isPowerOfTwo(int n) {
        String str = Long.toBinaryString((long)n);
        str = str.replace("0", "");
        return str.length() == 1;
    }
}

3. class Solution {
    public boolean isPowerOfTwo(int n) {
        int count = Long.bitCount((long)n); // 用bitcount函数更简单,而不用tobinarystring
        return count == 1;
    }
}
4. 或者用与& 运算来解，因为2的乘方减1和2的乘方做与运算 结果一定为0
所以一句就可以解决: return n > 0 && ((n & (n-1)) == 0);

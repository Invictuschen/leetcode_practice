class Solution {
    public int findKthLargest(int[] nums, int k) {
        // Arrays.sort(nums);
        // return nums[nums.length - k];  nlgn复杂度
        
        // PriorityQueue<Integer> pq = new PriorityQueue<>();
        // for (int i = 0; i < k; i++) {
        //     pq.offer(nums[i]);
        // }
        // for (int i = k; i < nums.length; i++) {
        //     if (pq.peek() < nums[i]) {
        //         pq.poll();
        //         pq.offer(nums[i]);
        //     }
        // }
        // return pq.poll();  用一个定长的priorityqueue来做 nlgn复杂度
        
        
        
    }
    
    public int findKthLargest(int[] A, int k) {
        k = A.length - k; // convert to index of k largest
        int l = 0, r = A.length - 1;
        while (l <= r) {
            int i = l; // partition [l,r] by A[l]: [l,i]<A[l], [i+1,j)>=A[l]
            for (int j = l + 1; j <= r; j++) {
                 if (A[j] < A[(l + r) / 2]) {
                    swap(A, j, ++i); }
            }
               
            swap(A, l, i);

            if (k < i) r = i - 1;
            else if (k > i) l = i + 1;
            else return A[i];
        }
        return -1; // k is invalid
    }
    public int[] swap (int[] a, int b, int c) {
        int temp = a[b];
        a[b] = a[c];
        a[c] = temp;
        return a;
    }
}

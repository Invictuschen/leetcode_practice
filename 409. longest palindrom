class Solution {
    // public int longestPalindrome(String s) {
    //     int load[] = new int[58];
    //     int odd = 0, even = 0;
    //     for (Character ch : s.toCharArray()) {
    //         load[ch - 'A']++;
    //     }
    //     for (Integer inte : load) {
    //         if (inte % 2 == 0) {
    //             even += inte;
    //         }
    //         else {
    //             // if(inte > odd) {
    //             //     odd = inte;
    //             // }  这句里面的想法错误在其实奇数个的字符也可以用，只要用它的偶数个就可以了
    //             odd = odd == 0 ? odd + inte : odd + inte - 1; 
    //         }
    //     }
    //     return even + odd;
    // }
    public int longestPalindrome(String s) {
        if( s == null || s.length() < 1)
            return 0;
        int[] freqs = new int[128];
        int n  = s.length();
        // Count each character appearance requencies
        for(int i = 0; i < n ;i ++) {
            freqs[s.charAt(i)] ++;
        }
        int ans = 0, odd = 0;
        for(int i = 0; i < 128; i ++){
            ans += freqs[i] % 2 == 0? freqs[i]: freqs[i] - 1;
            
            //See if there is an odd number
            if (freqs[i] % 2 != 0)
                odd = 1;
        }
        ans += odd;
        
        return ans;
    }
}

public class Solution {
    public boolean hasCycle(ListNode head) {
        // if(head == null || head.next == null)
        // {
        //     return false;
        // }
        // ListNode fast = head;
        // ListNode slow = head;
        // while(fast.next.next != null)
        // {
        //     fast = fast.next.next;
        //     slow = slow.next;
        //     if(fast == slow)
        //         return true;
        // }
        // return false;
        //这么写错在哪呢(空指针异常) 这边只写fast.next.next!=null 的时候会有可能fast.next已经是null了，
        所以fast.next.next此时就变成空指针了，所以判断语句中需要判断fast.next也不为null
    }
}
正解:
public class Solution {
    public boolean hasCycle(ListNode head) {
if(head == null || head.next == null)
        {
            return false;
        }
        ListNode fast = head;
        ListNode slow = head;
        while(fast.next != null && fast.next.next !=null)
        {
            fast = fast.next.next;
            slow = slow.next;
            if(fast == slow)
                return true;
        }
        return false;
      }
}
